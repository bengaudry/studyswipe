datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  pseudo        String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  collections Collection[]
  decks       Deck[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

//////    CUSTOM MODELS    \\\\\\

// An object grouping Decks of cards
model Collection {
  id          String @unique @default(uuid())
  ownerId     String

  title String
  decks Deck[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

// An object that contains a set of flashcards
model Deck {
  id           String @unique @default(uuid())
  collectionId String
  ownerId      String

  title       String
  description String?
  theme       String
  iconUri     String?
  isPublic    Boolean @default(false)
  cards       Json[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  Owner      User       @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Relation to User
}
